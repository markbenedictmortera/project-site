"Financial Intermediaries",
"Stakeholder Engagement and Information Disclosure"
)
)%>%
kbl(col.names = NULL)%>%
row_spec(0, extra_css = "border-bottom: 1px solid; border-top: 1px solid")%>%
column_spec(1:2,
border_left = T,
border_right = T)
tibble(
col1 = paste0("ESS", 1:10),
col2 = c(
"Assessment and Management of Environmental and Social Risks and Impacts",
"Labor and Working Conditions",
"Resource Efficiency and Pollution Prevention and Management",
"Community Health and Safety",
"Land Acquisition, Restrictions on the Land Use and Involuntary Resettlement",
"Biodiversity Conservation and Sustainable Management
of Living Natural Resources",
"Indigenous Peoples/Sub-Saharan African Historically Underserved Traditional Local Communities",
"Cultural Heritage",
"Financial Intermediaries",
"Stakeholder Engagement and Information Disclosure"
)
)%>%
kbl(col.names = NULL)%>%
row_spec(0, extra_css = "border-top: 1px solid")%>%
column_spec(1:2,
border_left = T,
border_right = T)
tibble(
col1 = paste0("ESS", 1:10),
col2 = c(
"Assessment and Management of Environmental and Social Risks and Impacts",
"Labor and Working Conditions",
"Resource Efficiency and Pollution Prevention and Management",
"Community Health and Safety",
"Land Acquisition, Restrictions on the Land Use and Involuntary Resettlement",
"Biodiversity Conservation and Sustainable Management
of Living Natural Resources",
"Indigenous Peoples/Sub-Saharan African Historically Underserved Traditional Local Communities",
"Cultural Heritage",
"Financial Intermediaries",
"Stakeholder Engagement and Information Disclosure"
)
)%>%
kbl(col.names = NULL)%>%
row_spec(1, extra_css = "border-top: 1px solid")%>%
column_spec(1:2,
border_left = T,
border_right = T)
tibble(
col1 = paste0("ESS", 1:10),
col2 = c(
"Assessment and Management of Environmental and Social Risks and Impacts",
"Labor and Working Conditions",
"Resource Efficiency and Pollution Prevention and Management",
"Community Health and Safety",
"Land Acquisition, Restrictions on the Land Use and Involuntary Resettlement",
"Biodiversity Conservation and Sustainable Management
of Living Natural Resources",
"Indigenous Peoples/Sub-Saharan African Historically Underserved Traditional Local Communities",
"Cultural Heritage",
"Financial Intermediaries",
"Stakeholder Engagement and Information Disclosure"
)
)%>%
kbl(col.names = NULL)%>%
row_spec(10, extra_css = "border-bottom: 1px solid")%>%
column_spec(1:2,
border_left = T,
border_right = T)
tibble(
col1 = paste0("ESS", 1:10),
col2 = c(
"Assessment and Management of Environmental and Social Risks and Impacts",
"Labor and Working Conditions",
"Resource Efficiency and Pollution Prevention and Management",
"Community Health and Safety",
"Land Acquisition, Restrictions on the Land Use and Involuntary Resettlement",
"Biodiversity Conservation and Sustainable Management
of Living Natural Resources",
"Indigenous Peoples/Sub-Saharan African Historically Underserved Traditional Local Communities",
"Cultural Heritage",
"Financial Intermediaries",
"Stakeholder Engagement and Information Disclosure"
)
)%>%
kbl(col.names = NULL)%>%
row_spec(9:10, extra_css = "border-bottom: 4px solid")%>%
column_spec(1:2,
border_left = T,
border_right = T)
tibble(
col1 = paste0("ESS", 1:10),
col2 = c(
"Assessment and Management of Environmental and Social Risks and Impacts",
"Labor and Working Conditions",
"Resource Efficiency and Pollution Prevention and Management",
"Community Health and Safety",
"Land Acquisition, Restrictions on the Land Use and Involuntary Resettlement",
"Biodiversity Conservation and Sustainable Management
of Living Natural Resources",
"Indigenous Peoples/Sub-Saharan African Historically Underserved Traditional Local Communities",
"Cultural Heritage",
"Financial Intermediaries",
"Stakeholder Engagement and Information Disclosure"
)
)%>%
kbl(col.names = NULL)%>%
column_spec(1:2,
border_left = T,
border_right = T)%>%
kable_styling("striped")
plotted_GIS <- leaflet(merged_GIS) %>%
addProviderTiles(providers$OpenStreetMap)%>%
addTiles(options = tileOptions(minZoom = 5.15)) %>%
addAwesomeMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = bed_icon)
source("ETL_GIS.R")
readNHFR()
governmentFacility()
getConstruction(T)
merged_GIS <- merge(government_facilities,
construction_status,
by.x = "Facility.Name",
by.y = "facility")%>%
replace(is.na(.), "")%>%
select(Facility.Name,
Longitude,
Latitude,
Official.Website,
amount,
project_description,
year,
status,
site_photos)%>%
mutate(status = status%>%str_replace_all("_", " ")%>%str_to_sentence)
merged_GIS <- merged_GIS %>% mutate(popup = case_when(
site_photos=="" ~
paste(
"<strong>", Facility.Name, "</strong>", "<br>",
"<a href=", Official.Website, ">", Official.Website, "</a>", "<br>",
"Project Year:", year, "<br>",
project_description, "<br>",
"Project Budget:", format(amount, big.mark = ","), "<br>",
"Status:", status
),
!is.na(site_photos) ~paste(
"<strong>", Facility.Name, "</strong>", "<br>",
"<a href=", Official.Website, ">", Official.Website, "</a>", "<br>",
"Project Year:", year, "<br>",
project_description, "<br>",
"Project Budget:", if_else(
!is.na(as.numeric(amount)),
paste(format(as.numeric(amount), big.mark = ","), " PHP"),
""), "<br>",
"Status:", status, "<br>",
# ,
"<a href=", site_photos, "> Site photos </a>"
)
)
)
source("libraries.R")
source("ETL_GIS.R")
readNHFR()
governmentFacility()
getConstruction(T)
leaflet
?leaflet
?awesomeIcons
bed_icon <- awesomeIcons(
"fa-bed",
"fa",
markerColor = "black",
"pink",
spin = T
)
plotted_GIS <- leaflet(merged_GIS) %>%
addProviderTiles(providers$OpenStreetMap)%>%
addTiles(options = tileOptions(minZoom = 5.15)) %>%
addAwesomeMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = bed_icon)
readNHFR()
governmentFacility()
getConstruction(T)
source("ETL_GIS.R")
readNHFR()
governmentFacility()
getConstruction(T)
merged_GIS <- merge(government_facilities,
construction_status,
by.x = "Facility.Name",
by.y = "facility")%>%
replace(is.na(.), "")%>%
select(Facility.Name,
Longitude,
Latitude,
Official.Website,
amount,
project_description,
year,
status,
site_photos)%>%
mutate(status = status%>%str_replace_all("_", " ")%>%str_to_sentence)
merged_GIS <- merged_GIS %>% mutate(popup = case_when(
site_photos=="" ~
paste(
"<strong>", Facility.Name, "</strong>", "<br>",
"<a href=", Official.Website, ">", Official.Website, "</a>", "<br>",
"Project Year:", year, "<br>",
project_description, "<br>",
"Project Budget:", format(amount, big.mark = ","), "<br>",
"Status:", status
),
!is.na(site_photos) ~paste(
"<strong>", Facility.Name, "</strong>", "<br>",
"<a href=", Official.Website, ">", Official.Website, "</a>", "<br>",
"Project Year:", year, "<br>",
project_description, "<br>",
"Project Budget:", if_else(
!is.na(as.numeric(amount)),
paste(format(as.numeric(amount), big.mark = ","), " PHP"),
""), "<br>",
"Status:", status, "<br>",
# ,
"<a href=", site_photos, "> Site photos </a>"
)
)
)
merged_GIS <- merged_GIS %>% mutate(popup =  paste(
"<strong>", Facility.Name, "</strong>", "<br>",
"<a href=", Official.Website, ">", Official.Website, "</a>", "<br>",
"Project Year:", year, "<br>",
project_description, "<br>",
"Project Budget:", if_else(
!is.na(as.numeric(amount)),
paste(format(as.numeric(amount), big.mark = ","), " PHP"),
""), "<br>",
"Status:", status, "<br>",
if_else(
site_photos=="",
"",
paste0("<a href=", site_photos, "> Site photos </a>")
)
)
)
status_color <- colorFactor(c(default_red, default_green, default_blue),
domain = c("not_started", "ongoing", "completed"))
bed_icon <- awesomeIcons(
"fa-bed",
"fa",
markerColor = "black",
"pink",
spin = T
)
plotted_GIS <- leaflet(merged_GIS) %>%
addProviderTiles(providers$OpenStreetMap)%>%
addTiles(options = tileOptions(minZoom = 5.15)) %>%
addAwesomeMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = bed_icon)
plotted_GIS
?makeicon
?makeIcon
glyph_bed <- makeIcon(
"https://glyphicons.com/img/glyphicons/basic/2x/glyphicons-basic-516-bed-sleeping@2x.png",
)
plotted_GIS2 <- leaflet(merged_GIS) %>%
addProviderTiles(providers$OpenStreetMap)%>%
addTiles(options = tileOptions(minZoom = 5.15)) %>%
addMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = glyph_bed)
plotted_GIS2
glyph_bed <- makeIcon(
"https://glyphicons.com/img/glyphicons/basic/2x/glyphicons-basic-516-bed-sleeping@2x.png",
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94
)
plotted_GIS <- leaflet(merged_GIS) %>%
addProviderTiles(providers$OpenStreetMap)%>%
addTiles(options = tileOptions(minZoom = 5.15)) %>%
addAwesomeMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = bed_icon)
plotted_GIS2 <- leaflet(merged_GIS) %>%
addProviderTiles(providers$OpenStreetMap)%>%
addTiles(options = tileOptions(minZoom = 5.15)) %>%
addMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = glyph_bed)
plotted_GIS2
glyph_bed <- makeIcon(
"https://glyphicons.com/img/glyphicons/basic/2x/glyphicons-basic-516-bed-sleeping@2x.png",
iconWidth = 38,
iconAnchorX = 22, iconAnchorY = 94
)
plotted_GIS2 <- leaflet(merged_GIS) %>%
addProviderTiles(providers$OpenStreetMap)%>%
addTiles(options = tileOptions(minZoom = 5.15)) %>%
addMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = glyph_bed)
plotted_GIS2
glyph_bed <- makeIcon(
"https://glyphicons.com/img/glyphicons/basic/2x/glyphicons-basic-516-bed-sleeping@2x.png",
iconWidth = 8
)
plotted_GIS2 <- leaflet(merged_GIS) %>%
addProviderTiles(providers$OpenStreetMap)%>%
addTiles(options = tileOptions(minZoom = 5.15)) %>%
addMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = glyph_bed)
plotted_GIS2
glyph_bed <- makeIcon(
"https://glyphicons.com/img/glyphicons/basic/2x/glyphicons-basic-516-bed-sleeping@2x.png",
iconWidth = 18
)
plotted_GIS2 <- leaflet(merged_GIS) %>%
addProviderTiles(providers$OpenStreetMap)%>%
addTiles(options = tileOptions(minZoom = 5.15)) %>%
addMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = glyph_bed)
plotted_GIS2
?addTiles
providers
View(providers)
plotted_GIS <- leaflet(merged_GIS) %>%
addProviderTiles(providers[["OpenStreetMap"]])%>%
addTiles(options = tileOptions(minZoom = 5.15)) %>%
addAwesomeMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = bed_icon)
# plotted_GIS2 <- leaflet(merged_GIS) %>%
# plotted_GIS2 <- leaflet(merged_GIS) %>%
#   addProviderTiles(providers$OpenStreetMap)%>%
# plotted_GIS2 <- leaflet(merged_GIS) %>%
#   addProviderTiles(providers$OpenStreetMap)%>%
#   # addTiles(options = tileOptions(minZoom = 5.15)) %>%
# plotted_GIS2 <- leaflet(merged_GIS) %>%
#   addProviderTiles(providers$OpenStreetMap)%>%
#   # addTiles(options = tileOptions(minZoom = 5.15)) %>%
#   addMarkers(lng = ~as.numeric(Longitude),
# plotted_GIS2 <- leaflet(merged_GIS) %>%
#   addProviderTiles(providers$OpenStreetMap)%>%
#   # addTiles(options = tileOptions(minZoom = 5.15)) %>%
#   addMarkers(lng = ~as.numeric(Longitude),
#                     lat = ~as.numeric(Latitude),
?addTiles
plotted_GIS <- leaflet(merged_GIS) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)%>%
addTiles(options = tileOptions(minZoom = 5.15)) %>%
addAwesomeMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = bed_icon)
providers$OpenStreetMap.Mapnik
?leaflet
providers
?addTile
?addTiles
plotted_GIS <- leaflet(merged_GIS,
options = leafletOptions(
minZoom = 6
)) %>%
addTiles(urlTemplate = "https://tiles.stadiamaps.com/tiles/osm_bright/{z}/{x}/{y}{r}.png")%>%
addAwesomeMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = bed_icon)
# plotted_GIS2 <- leaflet(merged_GIS) %>%
plotted_GIS
plotted_GIS <- leaflet(merged_GIS,
options = leafletOptions(
minZoom = 6
)) %>%
addTiles(urlTemplate = "https://tiles.stadiamaps.com/tiles/osm_bright/{z}/{x}/{y}{r}.png")%>%
addAwesomeMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = bed_icon)
plotted_GIS
bed_icon <- awesomeIcons(
"fa-bed",
"fa",
markerColor = "black",
"pink"
)
plotted_GIS <- leaflet(merged_GIS,
options = leafletOptions(
minZoom = 6
)) %>%
addTiles(urlTemplate = "https://tiles.stadiamaps.com/tiles/osm_bright/{z}/{x}/{y}{r}.png")%>%
addAwesomeMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = bed_icon)
plotted_GIS
plotted_GIS <- leaflet(merged_GIS,
options = leafletOptions(
minZoom = 6
)) %>%
addTiles()%>%
addProviderTiles(providers$Esri.NatGeoWorldMap)
plotted_GIS <- leaflet(merged_GIS,
options = leafletOptions(
minZoom = 6
)) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)%>%
addAwesomeMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = bed_icon)
plotted_GIS
getConstruction(F)
source("libraries.R")
readNHFR()
governmentFacility()
getConstruction(F)
merged_GIS <- merge(government_facilities,
construction_status,
by.x = "Facility.Name",
by.y = "facility")%>%
replace(is.na(.), "")%>%
select(Facility.Name,
Longitude,
Latitude,
Official.Website,
amount,
project_description,
year,
status,
site_photos)%>%
mutate(status = status%>%str_replace_all("_", " ")%>%str_to_sentence)
merged_GIS <- merged_GIS %>% mutate(popup = case_when(
site_photos=="" ~
paste(
"<strong>", Facility.Name, "</strong>", "<br>",
"<a href=", Official.Website, ">", Official.Website, "</a>", "<br>",
"Project Year:", year, "<br>",
project_description, "<br>",
"Project Budget:", format(amount, big.mark = ","), "<br>",
"Status:", status
),
!is.na(site_photos) ~paste(
"<strong>", Facility.Name, "</strong>", "<br>",
"<a href=", Official.Website, ">", Official.Website, "</a>", "<br>",
"Project Year:", year, "<br>",
project_description, "<br>",
"Project Budget:", if_else(
!is.na(as.numeric(amount)),
paste(format(as.numeric(amount), big.mark = ","), " PHP"),
""), "<br>",
"Status:", status, "<br>",
# ,
"<a href=", site_photos, "> Site photos </a>"
)
)
)
merged_GIS <- merged_GIS %>% mutate(popup =  paste(
"<strong>", Facility.Name, "</strong>", "<br>",
"<a href=", Official.Website, ">", Official.Website, "</a>", "<br>",
"Project Year:", year, "<br>",
project_description, "<br>",
"Project Budget:", if_else(
!is.na(as.numeric(amount)),
paste(format(as.numeric(amount), big.mark = ","), " PHP"),
""), "<br>",
"Status:", status, "<br>",
if_else(
site_photos=="",
"",
paste0("<a href=", site_photos, "> Site photos </a>")
)
)
)
status_color <- colorFactor(c(default_red, default_green, default_blue),
domain = c("not_started", "ongoing", "completed"))
bed_icon <- awesomeIcons(
"fa-bed",
"fa",
markerColor = "black",
"pink"
)
plotted_GIS <- leaflet(merged_GIS,
options = leafletOptions(
minZoom = 6
)) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)%>%
addAwesomeMarkers(lng = ~as.numeric(Longitude),
lat = ~as.numeric(Latitude),
popup = ~popup,
icon = bed_icon)
plotted_GIS
providers$Esri.NatGeoWorldMap
View(designated_labs_testing)
View(testing_data)
